
require Kraken;

operator entry(){
  NeckGuideSolver solver();

  Boolean drawDebug = true;
  Scalar rigScale = 1.0;

  Vec3 neckVec = Vec3(0.0, 16.00, -0.75);
  Vec3 neckMidVec = Vec3(0.0, 16.50, -0.50);
  Vec3 neckEndVec = Vec3(0.0, 17.00, -0.25);
  Vec3 upVector = Vec3(0.0, 0.0, -1.0);

  Quat neckOri;
  neckOri.setFromDirectionAndUpvector((neckMidVec - neckVec).unit(), ((neckVec + upVector) - neckVec).unit());

  Quat neckMidOri;
  neckMidOri.setFromDirectionAndUpvector((neckEndVec - neckMidVec).unit(), ((neckMidVec + upVector) - neckMidVec).unit());

  Mat44 neckCtrls[];
  neckCtrls.push(Xfo(neckVec, neckOri).toMat44());
  neckCtrls.push(Xfo(neckMidVec, neckMidOri).toMat44());
  neckCtrls.push(Xfo(neckEndVec, neckMidOri).toMat44());

  Mat44 neckOut[];
  neckOut.resize(3);

  solver.solve(drawDebug, rigScale, neckCtrls, neckOut);

  for (Integer i=0; i < neckOut.size(); i++) {
    report(neckOut[i]);
  }
}
