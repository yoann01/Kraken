require Math;

object KrakenRotationWaveClip : KrakenClip {
  String names[];
  UInt32 nameToId[String];
  Vec3 axes[];
  Float32 amplitudes[];
  Float32 shifts[];
  Float32 speeds[];
  Float32 offsets[];

  KrakenClipLookup lookup;
};

function KrakenRotationWaveClip() {
  this.lookup = null;
}

/// \dfgPresetDefault axis {"x": 1.0, "y": 0.0, "z": 0.0}
/// \dfgPresetDefault amplitude 1.0
/// \dfgPresetDefault shift 0.0
/// \dfgPresetDefault speed 3.0
/// \dfgPresetDefault offset 0.0
function KrakenRotationWaveClip.defineWave!(
  String name, 
  Vec3 axis,
  Float32 amplitude,
  Float32 shift,
  Float32 speed,
  Float32 offset
) {
  UInt32 id = this.nameToId.get(name, this.names.size());
  if(id == this.names.size()) {
    this.nameToId[name] = this.names.size();
    this.names.push(name);
    this.axes.push(axis);
    this.amplitudes.push(amplitude);
    this.shifts.push(shift);
    this.speeds.push(speed);
    this.offsets.push(offset);
  } else {
    this.axes[id] = axis;
    this.amplitudes[id] = amplitude;
    this.shifts[id] = shift;
    this.speeds[id] = speed;
    this.offsets[id] = offset;
  }
  this.lookup = null;
}

UInt32 KrakenRotationWaveClip.getChannelCount() {
  return this.names.size();
}

String KrakenRotationWaveClip.getChannelName(UInt32 id) {
  return this.names[id];
}

UInt32 KrakenRotationWaveClip.getChannelType(UInt32 id) {
  return KrakenClipChannel_Xfo;
}

Float32 KrakenRotationWaveClip.evaluateFloat32!(UInt32 id, io Ref<KrakenKLRig> rig, KrakenClipContext context) {
  return Float32();
}

Xfo KrakenRotationWaveClip.evaluateXfo!(UInt32 id, io Ref<KrakenKLRig> rig, KrakenClipContext context) {
  Xfo xfo;
  Float32 angle = this.shifts[id] + this.amplitudes[id] * sin(this.offsets[id] + Float32(context.time) * this.speeds[id]);
  xfo.ori.setFromAxisAndAngle(this.axes[id], angle);
  return xfo;
}

function KrakenRotationWaveClip.apply(io Ref<KrakenKLRig> rig, KrakenClipContext context, Float32 factor) {
  KrakenRotationWaveClip clip = this;
  if(clip.lookup == null)
    clip.lookup = KrakenClipLookup(rig, clip);
  clip.lookup.applyClip(rig, clip, context, factor);
}

function KrakenRotationWaveClip.saveToJson!(io FTL_JSONObjectEncoder encoder) {
  FTL_JSONArrayEncoder waveArrayEncoder = encoder.setArray('waves');
  for(Size i=0;i<this.names.size();i++) {
    FTL_JSONObjectEncoder waveEncoder = waveArrayEncoder.pushObject();
    waveEncoder.setString('name', this.names[i]);
    {
      FTL_JSONObjectEncoder axisEncoder = waveEncoder.setObject('axis');
      axisEncoder.setFloat64('x', this.axes[i].x);
      axisEncoder.setFloat64('y', this.axes[i].y);
      axisEncoder.setFloat64('z', this.axes[i].z);
    }
    waveEncoder.setFloat64('amplitude', this.amplitudes[i]);
    waveEncoder.setFloat64('shift', this.shifts[i]);
    waveEncoder.setFloat64('speed', this.speeds[i]);
    waveEncoder.setFloat64('offset', this.offsets[i]);
  }
}

function KrakenRotationWaveClip.loadFromJson!(io FTL_JSONObject decoder) {
  this.names.resize(0);
  this.nameToId.clear();
  this.axes.resize(0);
  this.amplitudes.resize(0);
  this.shifts.resize(0);
  this.speeds.resize(0);
  this.offsets.resize(0);

  FTL_JSONArray waveArrayDecoder = decoder.getArray('waves');
  for(Size i=0;i<waveArrayDecoder.size();i++) {
    FTL_JSONObject waveDecoder = waveArrayDecoder.getObject(i);
    String name = waveDecoder.getString('name');
    FTL_JSONObject axisDecoder = waveDecoder.getObject('axis');
    Vec3 axis;
    axis.x = Float32(axisDecoder.getFloat64('x'));
    axis.y = Float32(axisDecoder.getFloat64('y'));
    axis.z = Float32(axisDecoder.getFloat64('z'));
    Float32 amplitude = Float32(waveDecoder.getFloat64('amplitude'));
    Float32 shift = Float32(waveDecoder.getFloat64('shift'));
    Float32 speed = Float32(waveDecoder.getFloat64('speed'));
    Float32 offset = Float32(waveDecoder.getFloat64('offset'));
    this.defineWave(name, axis, amplitude, shift, speed, offset);
  }
}
