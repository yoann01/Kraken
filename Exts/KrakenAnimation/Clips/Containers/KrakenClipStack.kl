
object KrakenClipStack : KrakenClip {
  KrakenClip clips[];
  Float32 weights[];
};

function KrakenClipStack() {}

/// \dfgPresetDefault weight 1.0
function KrakenClipStack.addClip!(KrakenClip clip, Float32 weight) {
  this.clips.push(clip);
  this.weights.push(weight);
}

/// \dfgPresetDefault weight 1.0
function KrakenClipStack.setClipWeight!(UInt32 id, Float32 weight) {
  this.weights[id] = weight;
}

function UInt32 KrakenClipStack.getClipCount() {
  return this.clips.size();
}

function KrakenClip KrakenClipStack.getClip(UInt32 id) {
  return this.clips[id];
}

UInt32 KrakenClipStack.getChannelCount() {
  return 0;
}

String KrakenClipStack.getChannelName(UInt32 id) {
  return "";
}

UInt32 KrakenClipStack.getChannelType(UInt32 id) {
  return 0;
}

Float32 KrakenClipStack.evaluateFloat32!(UInt32 id, io Ref<KrakenKLRig> rig, KrakenClipContext context) {
  return Float32();
}

Xfo KrakenClipStack.evaluateXfo!(UInt32 id, io Ref<KrakenKLRig> rig, KrakenClipContext context) {
  return Xfo();
}

function KrakenClipStack.apply(io Ref<KrakenKLRig> rig, KrakenClipContext context, Float32 factor) {
  for(Size i=0;i<this.clips.size();i++)
    this.clips[i].apply(rig, context, factor * this.weights[i]);
}

function KrakenClipStack.saveToJson!(io FTL_JSONObjectEncoder encoder) {
  FTL_JSONArrayEncoder clipArrayEncoder = encoder.setArray('clips');
  for(Size i=0;i<this.clips.size();i++) {
    FTL_JSONObjectEncoder clipEncoder = clipArrayEncoder.pushObject();
    clipEncoder.setString('clipType', String(this.clips[i].type()));
    clipEncoder.setFloat64('weight', this.weights[i]);
    {
      FTL_JSONObjectEncoder clipContentEncoder = clipEncoder.setObject('content');
      this.clips[i].saveToJson(clipContentEncoder);
    }
  }
}

function KrakenClipStack.loadFromJson!(io FTL_JSONObject decoder) {
  this.clips.resize(0);
  this.weights.resize(0);

  FTL_JSONArray clipArrayDecoder = decoder.getArray('clips');
  for(Size i=0;i<clipArrayDecoder.size();i++) {
    FTL_JSONObject clipDecoder = clipArrayDecoder.getObject(i);
    String clipType = clipDecoder.getString('clipType');
    KrakenClip c = KrakenClip_getFromTypeName(clipType);
    if(c == null)
      continue;
    Float32 weight = Float32(clipDecoder.getFloat64('weight'));
    FTL_JSONObject contentDecoder = clipDecoder.getObject('content');
    c.loadFromJson(contentDecoder);
    this.addClip(c, weight);
  }
}
