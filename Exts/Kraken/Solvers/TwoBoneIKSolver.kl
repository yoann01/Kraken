require Math;
require InlineDrawing;

object TwoBoneIKSolver : KrakenSolver {
  Xfo initPose[];
};

/// Default Constructor
/// \dfgPresetTitle TwoBoneIKSolver_Constructor
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwoBoneIKSolver
function TwoBoneIKSolver()
{
  this.defaultValues["rightSide"] = false;
  this.defaultValues["ikblend"] = 0.0;
  this.defaultValues["root"] = Mat44();
  this.defaultValues["bone0FK"] = Mat44();
  this.defaultValues["bone1FK"] = Mat44();
  this.defaultValues["ikHandle"] = Mat44();
  this.defaultValues["upV"] = Mat44();
  this.defaultValues["bone0Len"] = 4.35313892365;
  this.defaultValues["bone1Len"] = 4.3648891449;
}

/// \dfgPresetTitle TwoBoneIKSolver_Constructor_Init
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwoBoneIKSolver
function TwoBoneIKSolver(
  Xfo initPose[])
{
  TwoBoneIKSolver();
  this.initPose = initPose;

  // Set Default Values
  this.defaultValues["rightSide"] = false;
  this.defaultValues["ikblend"] = 0.0;
  this.defaultValues["root"] = Mat44();
  this.defaultValues["bone0FK"] = Mat44();
  this.defaultValues["bone1FK"] = Mat44();
  this.defaultValues["ikHandle"] = Mat44();
  this.defaultValues["upV"] = Mat44();
  this.defaultValues["bone0Len"] = 4.35313892365;
  this.defaultValues["bone1Len"] = 4.3648891449;
}


// Return Arguments for Kraken
/// \dfgPresetOmit
function KrakenSolverArg[] TwoBoneIKSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('rightSide', 'In', 'Boolean'));

  args.push(KrakenSolverArg('ikblend', 'In', 'Scalar'));

  args.push(KrakenSolverArg('root', 'In', 'Mat44'));
  args.push(KrakenSolverArg('bone0FK', 'In', 'Mat44'));
  args.push(KrakenSolverArg('bone1FK', 'In', 'Mat44'));
  args.push(KrakenSolverArg('ikHandle', 'In', 'Mat44'));
  args.push(KrakenSolverArg('upV', 'In', 'Mat44'));

  args.push(KrakenSolverArg('bone0Len', 'In', 'Scalar'));
  args.push(KrakenSolverArg('bone1Len', 'In', 'Scalar'));
  args.push(KrakenSolverArg('bone0Out', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('bone1Out', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('bone2Out', 'Out', 'Mat44'));
  args.push(KrakenSolverArg('midJointOut', 'Out', 'Mat44'));
  return args;
}

/// \dfgPresetTitle Solve2BoneIK
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Utils
function solve2BoneIK(
  in Scalar bone0Length,
  in Scalar bone1Length,
  in Vec3 rootPosition,
  in Vec3 upVPosition,
  in Vec3 goalPosition,
  io Xfo bone0Xfo,
  io Xfo bone1Xfo,
) {

  Vec3 rootToGoal = goalPosition - rootPosition;
  Vec3 rootToUpV = upVPosition - rootPosition;

  bone0Xfo.tr = rootPosition;

  Vec3 xaxis = rootToGoal.unit();
  Vec3 zaxis = xaxis.cross(rootToUpV.unit()).cross(xaxis).unit().negate();
  Vec3 yaxis = zaxis.cross(xaxis).unit();
  bone0Xfo.ori.setFromMat33(Mat33(xaxis, yaxis, zaxis).transpose());

  Scalar distToIkGoal = rootToGoal.length();
  // Use trigonometry to determine the ikBoneAngle
  // Law of cosines. a = BoneLength; b = Child BoneLength; c = Distance to the Ik Goal;
  Scalar ikBoneAngle = acos(Math_clamp((sq(bone0Length) + sq(distToIkGoal) - sq(bone1Length)) / (2.0 * bone0Length * distToIkGoal), - 1.0, 1.0));

  // Apply the rotation in the coordinate space of the bone.
  Quat offset;
  offset.setFromAxisAndAngle(Vec3(0.0, 1.0, 0.0), ikBoneAngle);
  bone0Xfo.ori = bone0Xfo.ori * offset;

  // transform the vector without applying scale.
  bone1Xfo.tr = bone0Xfo.tr + bone0Xfo.ori.rotateVector(Vec3(bone0Length, 0.0, 0.0));
  bone1Xfo.ori = bone0Xfo.ori;

  offset.setFrom2Vectors(bone1Xfo.ori.getXaxis(), (goalPosition - bone1Xfo.tr).unit());
  bone1Xfo.ori = offset * bone1Xfo.ori;
}


// Solve
/// \dfgPresetTitle TwoBoneIKSolver_Solve
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwoBoneIKSolver
/// \dfgPresetRange rigScale (0.1, 1000.0)
/// \dfgPresetRange ikblend (0.0, 1.0)
function TwoBoneIKSolver.solve!
(
  Boolean drawDebug,
  Scalar rigScale,
  Boolean rightSide,

  Scalar ikblend,

  Mat44 root,
  Mat44 bone0FK,
  Mat44 bone1FK,
  Mat44 ikHandle,
  Mat44 upV,

  Scalar bone0Len,
  Scalar bone1Len,
  io Mat44 bone0Out,
  io Mat44 bone1Out,
  io Mat44 bone2Out,
  io Mat44 midJointOut
) {
  Xfo bone0FkXfo = Xfo(bone0FK);
  Xfo bone1FkXfo = Xfo(bone1FK);
  Xfo bone0Xfo = bone0FkXfo;
  Xfo bone1Xfo = bone1FkXfo;
  Xfo bone2Xfo = bone1Xfo;
  bone2Xfo.tr = bone1Xfo.transformVector(Vec3(bone1Len, 0.0, 0.0));
  Xfo midJointXfo = Xfo();

  Scalar scaledBone0Len = bone0Len * rigScale;
  Scalar scaledBone1Len = bone1Len * rigScale;

  if(ikblend > 0.0) {
    solve2BoneIK(
      scaledBone0Len,
      scaledBone1Len,
      root.translation(),
      upV.translation(),
      ikHandle.translation(),
      bone0Xfo,
      bone1Xfo
    );
    bone0Xfo.ori = bone0FkXfo.ori.sphericalLinearInterpolate(bone0Xfo.ori, ikblend);
    bone1Xfo.tr = bone0Xfo.transformVector(Vec3(bone0Len, 0.0, 0.0));
    bone1Xfo.ori = bone1FkXfo.ori.sphericalLinearInterpolate(bone1Xfo.ori, ikblend);
  }

  // project bone2 to the end of bone 1
  bone2Xfo = bone1Xfo;
  bone2Xfo.tr = bone1Xfo.transformVector(Vec3(bone1Len, 0.0, 0.0));

  // Set Mid Joint Xfo
  midJointXfo.tr = bone1Xfo.tr;
  midJointXfo.ori = bone0Xfo.ori.sphericalLinearInterpolate(bone1Xfo.ori, 0.5);

  // Set scaling
  Vec3 outScaling = Vec3(rigScale, rigScale, rigScale);
  bone0Xfo.sc = outScaling;
  bone1Xfo.sc = outScaling;
  bone2Xfo.sc = outScaling;
  midJointXfo.sc = outScaling;

  bone0Out = bone0Xfo.toMat44();
  bone1Out = bone1Xfo.toMat44();
  bone2Out = bone2Xfo.toMat44();
  midJointOut = midJointXfo.toMat44();

  // Set debugging visibility.
  this.setDebug(drawDebug);
  if(this.drawDebug){
    if(!this.handle)
      this.handle = DrawingHandle();
    Color boneColor(1.0, 1.0, 0);
    etDrawBone(this.handle.rootTransform, 'bone0', bone0Xfo, scaledBone0Len, scaledBone0Len * 0.15, boneColor);
    etDrawBone(this.handle.rootTransform, 'bone1', bone1Xfo, scaledBone1Len, scaledBone1Len * 0.15, boneColor);
    etDrawBone(this.handle.rootTransform, 'midJoint', bone1Xfo, scaledBone1Len, scaledBone1Len * 0.15, boneColor);
  }
}


// =========== TwoBoneIK Guide Solver ================ //
object TwoBoneIKGuideSolver : KrakenSolver {
  Xfo initPose[];
};

// Default Constructor
/// \dfgPresetTitle TwoBoneIKGuideSolver_Constructor
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwoBoneIKSolver\Guide
function TwoBoneIKGuideSolver()
{

}


// Return Arguments for Kraken
/// \dfgPresetOmit
function KrakenSolverArg[] TwoBoneIKGuideSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();

  args.push(KrakenSolverArg('root', 'In', 'Mat44'));
  args.push(KrakenSolverArg('mid', 'In', 'Mat44'));
  args.push(KrakenSolverArg('end', 'In', 'Mat44'));

  args.push(KrakenSolverArg('guideOpHost', 'Out', 'Mat44'));
  return args;
}

/// \dfgPresetTitle TwoBoneIKGuideSolver_Solve
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwoBoneIKSolver\Guide
function TwoBoneIKGuideSolver.solve!(
  Boolean drawDebug,
  Scalar rigScale,

  Mat44 root,
  Mat44 mid,
  Mat44 end,
  io Mat44 guideOpHost
) {

  Vec3 debugPositions[];
  debugPositions.resize(3);

  debugPositions[0] = root.translation();
  debugPositions[1] = mid.translation();
  debugPositions[2] = end.translation();

  guideOpHost = Mat44();

  // Set debugging visibility.
  this.setDebug(drawDebug);
  if(this.drawDebug){
    if(!this.handle)
      this.handle = DrawingHandle();
    Color lineColor(1.0, 1.0, 0);
    drawLineStrip(this.handle.rootTransform, 'TwoBoneIKGuideLines', debugPositions, lineColor);
  }
}