require Math;
require InlineDrawing;


object DynamicChainSolver : KrakenSolver {
  Scalar boneLengths[];

  // Simulation properties
  Vec3 trPrev[];
  Vec3 trCurr[];
};

// Default Constructor
/// \dfgPresetTitle DynamicChainSolver_Constructor
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\DynamicChainSolver
function DynamicChainSolver()
{

}

// Return Arguments for Kraken
/// \dfgPresetOmit
function KrakenSolverArg[] DynamicChainSolver.getArguments() {
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('simulate', 'In', 'Boolean'));
  args.push(KrakenSolverArg('resetframe', 'In', 'Scalar'));
  args.push(KrakenSolverArg('frame', 'In', 'Scalar'));
  args.push(KrakenSolverArg('simBlendStart', 'In', 'Scalar'));
  args.push(KrakenSolverArg('simBlendEnd', 'In', 'Scalar'));
  args.push(KrakenSolverArg('dampening', 'In', 'Scalar'));
  args.push(KrakenSolverArg('gravity', 'In', 'Scalar'));
  args.push(KrakenSolverArg('massStart', 'In', 'Scalar'));
  args.push(KrakenSolverArg('massEnd', 'In', 'Scalar'));
  args.push(KrakenSolverArg('fkPose', 'In', 'Mat44[]'));
  args.push(KrakenSolverArg('animPose', 'Out', 'Mat44[]'));
  return args;
}

/// \dfgPresetTitle DynamicChainSolver_Reset
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\DynamicChainSolver
function DynamicChainSolver.reset!(
  in Mat44 fkPose[],
  io Mat44 animPose[]
  ) {
  this.boneLengths.resize(0);
  this.trPrev.resize(0);
  this.trCurr.resize(0);

  for (Integer i=0; i<animPose.size(); i++) {
    animPose[i] = fkPose[i];
  }
}

/// \dfgPresetTitle DynamicChainSolver_Init
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\DynamicChainSolver
function DynamicChainSolver.init!(
  in Mat44 fkPose[],
  io Mat44 animPose[]) {

  // report('Initializing Dynamic Chain Solver.');

  // Resize arrays based on fkPose inputs
  this.boneLengths.resize(fkPose.size());
  this.trPrev.resize(fkPose.size());
  this.trCurr.resize(fkPose.size());

  // Update bone lengths, previous position, and current position
  for (Integer i = 0; i < fkPose.size(); i++) {
    if (i == fkPose.size() - 1) {
      this.boneLengths[i] =this.boneLengths[i - 1];
    }
    else {
      this.boneLengths[i] = (fkPose[i].translation() - fkPose[i + 1].translation()).length();
    }

    this.trPrev[i] = fkPose[i] * Vec3(this.boneLengths[i], 0.0, 0.0);
    this.trCurr[i] = this.trPrev[i];
  }

}

/// \dfgPresetTitle DynamicChainSolver_Solve
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\DynamicChainSolver
function DynamicChainSolver.solve!(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Boolean simulate,
  in Scalar resetframe,
  in Scalar frame,
  in Scalar simBlendStart,
  in Scalar simBlendEnd,
  in Scalar dampening,
  in Scalar gravity,
  in Scalar massStart,
  in Scalar massEnd,
  in Mat44 fkPose[],
  io Mat44 animPose[])
{
  this.drawDebug = drawDebug;

  if (frame <= resetframe) {
    this.reset(fkPose, animPose);

    if(this.handle != null) {
      this.handle.clear();
    }

  }
  else {
    Boolean initilized = this.trPrev.size() == animPose.size();
    if(!initilized){
      this.init(fkPose, animPose);
    }

    if (simulate != true) {
      animPose = fkPose;
    }
    else {

      // ============================================
      // Compute the Verlet simulation of the strand
      // ============================================
      Vec3 temp[] = this.trCurr.clone();
      for (Integer i=0; i < animPose.size(); i++) {

        Scalar timeStep = 1.0 / 24.0;
        Scalar mass = Math_linearInterpolate(massStart, massEnd, Scalar(i) / Scalar(animPose.size() - 1));
        Vec3 force = Vec3(0, gravity, 0);

        this.trPrev[i] = this.trPrev[i].linearInterpolate(this.trCurr[i], dampening);

        /*

        The force that pulls the simulation back to the source pose.
        (confusing as it overlaps with simulation weight, but has a slighly different behavior. Maybe we should just remove.)
        Vec3 attachedTr = animPose.getXfo(boneIndex).transformVector(Vec3(bones[boneIndex].length, 0.0, 0.0));
        force += ((attachedTr - this.trCurr[i]) * this.springStrengths);

        */

        Vec3 delta = (force / mass) * (timeStep * timeStep);
        this.trCurr[i] += (this.trCurr[i] - this.trPrev[i]) + delta;

      }

      // =========================================================================
      // Now apply the inter-link constraints that keep the chain from stretching
      // =========================================================================
      Vec3 debugAnchorCurrPos[];
      Vec3 debugAnchorPrevAnchorPos[];
      Vec3 debugAnchorNextAnchorPos[];
      Xfo debugSimulatedTr[];
      debugAnchorCurrPos.resize(animPose.size());
      debugAnchorPrevAnchorPos.resize(animPose.size());
      debugAnchorNextAnchorPos.resize(animPose.size());
      debugSimulatedTr.resize(animPose.size());

      Vec3 temp2[] = this.trCurr.clone();
      for (Integer i = 0; initilized && i < animPose.size(); i++) {

        Vec3 prevAnchor;
        if(i==0){
          prevAnchor = fkPose[0].translation();
        }
        else{
          prevAnchor = temp2[i-1];
        }

        // Store Debug Data
        debugAnchorCurrPos[i] = temp2[i];
        debugAnchorPrevAnchorPos[i] = prevAnchor;


        Vec3 prevVec = (prevAnchor - temp2[i]);
        Scalar prevVecLength = prevVec.length();
        Scalar boneLength = this.boneLengths[i];
        this.trCurr[i] += (prevVec * ((prevVecLength - boneLength)/prevVecLength)) * 0.45;

        if(i<(animPose.size() - 1)){
          Vec3 nextAnchor = temp2[i+1];

          // Store Debug Data
          debugAnchorNextAnchorPos[i] = nextAnchor;

          Vec3 nextVec = (nextAnchor - temp2[i]);
          Scalar nextVecLength = nextVec.length();
          Scalar nextBoneLength = this.boneLengths[i+1];
          this.trCurr[i] += (nextVec * ((nextVecLength - nextBoneLength)/nextVecLength)) * 0.45;
        }
      }

      // =====================================
      // Now apply the simulation to the pose.
      // =====================================
      for (Integer i = 0; i < animPose.size(); i++) {
        Xfo boneXfo = fkPose[i];
        if(i>0){
          boneXfo.tr = animPose[i-1] * Vec3(this.boneLengths[i-1], 0.0, 0.0);
        }

        Vec3 boneTip = boneXfo.transformVector(Vec3(this.boneLengths[i], 0.0, 0.0));
        Vec3 simulatedTr = this.trCurr[i];

        // Store Debug Data
        debugSimulatedTr[i].tr = simulatedTr;

        // Linear Interp between start / end sim blend values to distribute blend along chain.
        Scalar simBlend = Math_linearInterpolate(simBlendStart, simBlendEnd, Scalar(i) / Scalar(animPose.size() - 1));

        // Rotate the bone to look at the simulated point.
        Quat boneOffsetRotation;
        boneOffsetRotation.setFrom2Vectors(boneXfo.ori.getXaxis(), (simulatedTr - boneXfo.tr).unit());
        boneOffsetRotation = Quat().sphericalLinearInterpolate(boneOffsetRotation, simBlend);

        // TODO: Do some logic here to limit the rotation compared to the previous bone to prevent self intersection

        // We align the last animPose item to the previous item to stabilize the tip.
        if (i == animPose.size() - 1) {
          boneXfo.ori.setFromMat33(animPose[i - 1].upperLeft());
        }
        else {
          boneXfo.ori = boneOffsetRotation * boneXfo.ori;
        }

        animPose[i] = boneXfo.toMat44();

        // Integrate the results back into the simulationso that the next evaluation is based on the resulting pose.
        this.trCurr[i] = boneXfo.transformVector(Vec3(this.boneLengths[i], 0.0, 0.0));
      }

      this.trPrev = temp;

      // ==========
      // Debugging
      // ==========
      this.setDebug(drawDebug);
      if(this.drawDebug){
        if(!this.handle)
          this.handle = DrawingHandle();

        Color boneColor(1.0, 1.0, 0);
        for (Integer d=0; d < animPose.size(); d++) {
          // etDrawBone(this.handle.rootTransform, 'bone' + d, animPose[d], 1.0, 0.15, boneColor);

          drawLine(this.handle.rootTransform, 'prevAnchor' + d, debugAnchorCurrPos[d], debugAnchorPrevAnchorPos[d], Color(0.0, 0.0, 1.0));
          // drawLine(this.handle.rootTransform, 'nextAnchor' + d, debugAnchorCurrPos[d], debugAnchorNextAnchorPos[d], Color(0.5, 0.5, 0.0));

          Color simTrColor(1.0, 0.0, 0);
          drawCross(this.handle.rootTransform, 'simTr' + d, debugSimulatedTr[d], 0.15, simTrColor);
        }


      }
    }
  }
}
