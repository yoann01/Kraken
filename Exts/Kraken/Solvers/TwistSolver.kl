require InlineDrawing;
require Geometry;

object TwistSolver : KrakenSolver {
};

// Default Constructor
/// \dfgPresetTitle TwistSolver_Constructor
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwistSolver
function TwistSolver()
{

}

// Return Arguments for Kraken
/// \dfgPresetOmit
function KrakenSolverArg[] TwistSolver.getArguments(){
  KrakenSolverArg args[] = this.parent.getArguments();
  args.push(KrakenSolverArg('blendBias', 'In', 'Scalar'));
  args.push(KrakenSolverArg('origin', 'In', 'Mat44'));
  args.push(KrakenSolverArg('originUpV', 'In', 'Mat44'));
  args.push(KrakenSolverArg('insert', 'In', 'Mat44'));
  args.push(KrakenSolverArg('insertUpV', 'In', 'Mat44'));
  args.push(KrakenSolverArg('pose', 'Out', 'Mat44[]'));
  return args;
}


// Solve
/// \dfgPresetTitle TwistSolver_Solve
/// \dfgPresetColor Color(49, 60, 61)
/// \dfgPresetHeaderColor Color(42, 94, 102)
/// \dfgPresetTextColor Color(168, 229, 240)
/// \dfgPresetFolder Solvers\TwistSolver
function TwistSolver.solve!
(
  in Boolean drawDebug,
  in Scalar rigScale,
  in Scalar blendBias,
  in Mat44 origin,
  in Mat44 originUpV,
  in Mat44 insert,
  in Mat44 insertUpV,
  io Mat44 pose[]
  )
{
  Xfo outXfos[];
  outXfos.resize(pose.size());

  Xfo originDir;
  originDir.tr = origin.translation();
  originDir.ori.setFromDirectionAndUpvector(insert.translation() - origin.translation(),
                                            originUpV.translation() - origin.translation());

  Xfo insertDir;
  insertDir.tr = insert.translation();
  insertDir.ori.setFromDirectionAndUpvector(insert.translation() - origin.translation(),
                                            insertUpV.translation() - insert.translation());

  Quat xAlignOri;
  xAlignOri.setFromAxisAndAngle(Vec3(0, 1, 0), Math_degToRad(-90));

  Scalar blend;
  Scalar bias;
  Scalar twistFraction;
  Scalar twistBiasBlend;
  Scalar twistBlend;
  for(Integer i=0; i < pose.size(); i++) {

    // Bias can't be less than 0.1 or greater than 0.9
    bias = blendBias;

    if (bias == 0) {
      if (i == pose.size() - 1) {
        outXfos[i].ori = insertDir.ori;
      }
      else {
        outXfos[i].ori = originDir.ori;
      }
    }
    else if (bias == 1) {
      if (i == 0) {
        outXfos[i].ori = originDir.ori;
      }
      else {
        outXfos[i].ori = insertDir.ori;
      }
    }
    else {
      if (bias == 0) {
        bias = 0.0001;
      }
      else if (bias == 1) {
        bias = 1.0 - 0.0001;
      }

      // Calculate the twist blend with bias
      twistFraction = Scalar(i) / Scalar(pose.size() - 1);
      twistBiasBlend = twistFraction / ((((1.0 / bias) - 2.0) * (1.0 - twistFraction)) + 1.0);
      twistBlend = Math_linearInterpolate(0.0, 1.0, twistBiasBlend);

      // Blend Rotations
      outXfos[i].ori = originDir.ori.sphericalLinearInterpolate(insertDir.ori, twistBlend);
    }

    // Blend Translations
    blend = Scalar(i) / (pose.size() - 1);
    outXfos[i].tr = originDir.tr.linearInterpolate(insertDir.tr, blend);


    // Align X Axis down the length
    outXfos[i].ori *= xAlignOri;
  }

  // Set final output array
  for(Integer i=0; i < pose.size(); i++) {
    pose[i] = outXfos[i].toMat44();
  }


  // Set debugging visibility.
  this.setDebug(this.drawDebug);
  if(this.drawDebug) {

  }
}
